#include<iostream>
#include<fstream>
#define BOARD_CONSTANT 3
#define AI_MOVE 0
#define USER_MOVE 1
#define USER2_MOVE 2 

using namespace std;
struct Move {
	int x; 
	int y;
};

class Board {

public:
	char board[BOARD_CONSTANT][BOARD_CONSTANT];

	void InitializeBoard()
	{
		for (int i = 0; i < BOARD_CONSTANT; i++)
			for (int j = 0; j < BOARD_CONSTANT; j++)
				board[i][j] = '.';
	}

	void ShowBoard()
	{
		for (int i = 0; i < BOARD_CONSTANT; i++)
		{
			for (int j = 0; j < BOARD_CONSTANT; j++)
			{
				cout << "   " << board[i][j];
			}
			cout << "\n\n";
		}

	}

    void UpdateBoard(int i, int j, int CurrentPlayer, char Player_Sign, char Player_2Sign)
	{
		if (CurrentPlayer == USER_MOVE)
		{
			board[i][j] = Player_Sign;
		}
		else if (CurrentPlayer == AI_MOVE || CurrentPlayer == USER2_MOVE)
		{
			board[i][j] = Player_2Sign;
		}
	}

	char checkVictory(char board[3][3]) {

		if (board[0][0] != '.'
			&& ((board[0][0] == board[0][1] && board[0][1] == board[0][2])
				|| (board[0][0] == board[1][0] && board[1][0] == board[2][0])))
		{
			return board[0][0];
		}

		else if (board[1][1] != '.'
			&& ((board[1][1] == board[0][0] && board[1][1] == board[2][2])
				|| (board[1][1] == board[0][2] && board[1][1] == board[2][0])
				|| (board[1][1] == board[0][1] && board[1][1] == board[2][1])
				|| (board[1][1] == board[1][0] && board[1][1] == board[1][2])))
		{
			return board[1][1];
		}

		else if (board[2][2] != '.'
			&& ((board[2][2] == board[1][2] && board[2][2] == board[0][2])
				|| (board[2][2] == board[3][2] && board[2][2] == board[3][1])))
		{
			return board[2][2];
		}

	return 'n';
	}

} board;

class AI {
	bool isComputer;
	char player_sign, comp_sign;

	int max(int a, int b)
	{
		return a > b ? a : b;
	}

	int min(int a, int b)
	{
		return a > b ? b : a;
	}

	int MiniMax(char Board[3][3], int depth, bool isComputer,int counter)
	{
		if (board.checkVictory(Board) == comp_sign)
			return 10 - depth;

		else if (board.checkVictory(Board) == player_sign)
			return -10 + depth;

		else if (counter == 10)
			return 0;

		if (isComputer) {
			int best = -1000;
			for (int i = 0; i < 3; i++) {
				for (int j = 0; j < 3; j++) {
					if (Board[i][j] == '.') {
						Board[i][j] = comp_sign;             
						best = max(best, MiniMax(Board, depth + 1, !isComputer, counter + 1));
						Board[i][j] = '.';
					}
				}
			}
			return best;
		}
		else {
			int best = 1000;
			for (int i = 0; i < 3; i++) {
				for (int j = 0; j < 3; j++) {
					if (Board[i][j] == '.') {
						Board[i][j] = player_sign;
						best = min(best, MiniMax(Board, depth + 1, !isComputer, counter + 1));
						Board[i][j] = '.';
					}
				}
			}
			return best;
		}
	}

public :
	Move AIMove(char Board[3][3], char comp_sign, char player_sign,int counter)
	{
		this->player_sign = player_sign;
		this->comp_sign = comp_sign;

		int bestVal = -1000;
		Move bestmove;
		bestmove.x = bestmove.y = -1;

		for (int i = 0; i < 3; i++)	{
			for (int j = 0; j < 3; j++)	{
				if (Board[i][j] == '.')	{
					Board[i][j] = comp_sign;
					int moveVal = MiniMax(Board, 0, false, counter + 1);
					Board[i][j] = '.';

					if (moveVal >= bestVal) {
						bestmove.x = i;
						bestmove.y = j;
						bestVal = moveVal;
					}
				}
			}
		}
		return bestmove;
	}

};

class Game {
	Move move;
	int counter;
	char play_with_comp, Player_Sign, Player_2Sign, victory, first_move;
	bool vict,change;
	AI ai;
	void playerTurn(int CurrentPlayer)
	{
	start: 
		system("cls");
		board.ShowBoard();

		cout << "Enter the Co-ordinates: ";
		cin >> move.x >> move.y;
		move.x--; move.y--;

		if (move.x > 3 || move.x < 0 || move.y > 3 || move.y < 0)            // Checking validity of Coordinates
		{
			cout << "\n Invalid Co-Ordinates!Please Enter Again.\n";
			system("pause");
			goto start;
		}

		if (board.board[move.x][move.y] != '.') {
			cout << "\nCo-ordinate is Pre-Occupied.Please ENTER again.\n";
			system("pause");
			goto start;
		}

		board.UpdateBoard(move.x, move.y, CurrentPlayer, Player_Sign, Player_2Sign);     // Updating the Board
	
	}


public:

	Game() :counter(1),first_move('y'),victory('n'),vict(false),change(false)
	{ board.InitializeBoard(); }
	
	void startGame()
	{

		cout << "\nDo you want to play with me(Computer)?(y/n) ";
		cin >> play_with_comp;

		if (play_with_comp == 'y' || play_with_comp == 'Y')
		{
			cout << "\nDo you want to play first?(y/n) ";         
			cin >> first_move;
		}

		cout << "\nEnter Player's Symbol : ";                      // Taking Signs.
		cin >> Player_Sign;

		if(play_with_comp == 'y'|| play_with_comp == 'Y')
		  cout << "\nEnter my Symbol : ";
		else
			cout << "\nEnter PlayerII's Symbol : ";

		cin >> Player_2Sign;


		while (counter < 10)
		{
			if (vict) break;

			if (play_with_comp == 'y' || play_with_comp == 'Y')
			{
				if ((first_move == 'y' || first_move == 'Y'))
				{
					if (change == false) {
					 playerTurn(USER_MOVE);
					 change = true;
					}

					else {
					  Move aiMove;
					  aiMove = ai.AIMove(board.board, Player_2Sign, Player_Sign,counter);
					  board.UpdateBoard(aiMove.x, aiMove.y, AI_MOVE, Player_Sign, Player_2Sign);
					
                      change = false;
					}
				}
				else if((first_move == 'n' || first_move == 'N'))
				{
					if(change == false) {
					 Move aiMove;
					  aiMove = ai.AIMove(board.board, Player_2Sign, Player_Sign,counter);
					  board.UpdateBoard(aiMove.x, aiMove.y, AI_MOVE, Player_Sign, Player_2Sign);
					  change = true;
					}

					else {
					 playerTurn(USER_MOVE);
					 change = false;
					}
				
				}
			}
			else
			{
				if (change == false) { change = true;  playerTurn(USER_MOVE); }
				else { change = false;  playerTurn(USER2_MOVE); }
			}
			

			victory = board.checkVictory(board.board);
			if (victory != 'n')
		    {
			   system("cls");
			   board.ShowBoard();
			   vict = true;
			   if (victory == Player_Sign)
				 if (play_with_comp == 'y' || play_with_comp == 'Y')
					cout << "Cheers! You won.\n";
				else
					cout << "Cheers! PlayerI won.\n";
			   else
				 if (play_with_comp == 'y' || play_with_comp == 'Y')
				{	cout << "Yeah! I won\n";
                                        cout<<" Gear up and try again next time ";
                                }
				 else
					cout << "PlayerII won.\n";
			   system("pause");
			}
		
			counter++;
		} // End of While

		if (counter == 10)
		{
			system("cls");
			board.ShowBoard();
			cout << "Cat's Game.\n";
			system("pause");
		}
	} // End of Function

};

void main()
{
	char ch = 'y';
	while (ch == 'y' || ch == 'Y')
	{
		Game game;
                 char c;
        ab:   cout<<" DO YOU WANT TO SEE INSTRUCTIONS (y/n) ";
           cin>>c;
           if(c=='y')
             {   fstream fout;
                 fout.open("T3-The game.txt");
                    if(!fin) 
                     {cout<<" OOPS! cannot open file";
                         goto ab;
                    }
                 fout<<"      WELCOME TO T3-THE GAME       "<<endl;
                 fout<<"  THE FOLLOWING INSTRUCTIONS WILL GUIDE YOU IN THIS GAME  "<<endl;
                 fout<<" RULE 1"<<endl;
                 fout<<"   THERE ARE TWO MODES OF PLAYING THIS GAME :"<<endl;
                 fout<<"      1.PLAYER Vs AI  "<<endl;
                 fout<<"      2.PLAYER Vs PLAYER  "<<endl;
                 fout<<"      YOU CAN CHOOSE ANY ONE OF THEM AS YOU LIKE.  "<<endl;
                 fout<<" RULE 2   "<<endl;
                 fout<<"    EVERY PLAYER HAS TO SPECIFY HIS SYMBOL   "<<endl;
                 fout<<" RULE 3   "<<endl;
                 fout<<"    THERE ARE NINE BLOCKS IN THE BOARD "<<endl;
                 fout<<"    EVERY PLAYER CAN OCCUPY ONLY ONE BLOCK IN A MOVE BY HIS CHOOSEN SYMBOL   "<<endl;
                 fout<<" RULE 4  "<<endl;
                 fout<<"    FOR OCCUPYING A SPECIFIC BLOCK PLAYER HAS TO ENTER HIS MOVE IN THE FORM "<<endl;
                 fout<<"    OF INDEXES OF A TWO DIMENSIONAL MATRIX,WHERE INDEX STARTS FROM 1 NOT 0.  "<<endl;
                 fout<<" RULE 5  "<<endl;
                 fout<<"    THE MAIN OBJECTIVE OF THE GAME IS TO OCCUPY BLCKS THAT ARE IN ONE OF THE FOLLOWING SEQUENCE :  "<<endl;
                 fout<<"    1.BY OCCUPYING ANY ONE OF THE THREE ROWS.  "<<endl;
                 fout<<"    2.BY OCCUPYING ANY ONE OF THE THREE COLUMNS.   "<<endl;
                 fout<<"    3.BY OCCUPYING ANY ONE OF THE TWO DIAGONALS.   "<<endl;
                 fout<<"  THE FULLFILLING ANY ONE OF THE ABOVE CONDITIONS WILL BECOME THE WINNER.  "<<endl;
                 fout<<"                              SO,ALL THE BEST FOR THE GAME.   ";
	     }
               else
              {cout<<" All the best ";}
               game.startGame();
		system("cls");
		cout << " Want to play again?(y/n) ";
		cin >> ch;
	}
	system("pause");
}